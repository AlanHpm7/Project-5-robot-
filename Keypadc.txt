/********************************************************************************
 * Description: Keypad functions to initialize, and check status.
 ********************************************************************************/
/*
 _________________________
 |     |     |     |     |
 R1 |  1  |  2  |  3  |  A  |
    |_____|_____|_____|_____|
 |     |     |     |     |
 R2 |  4  |  5  |  6  |  B  |
    |_____|_____|_____|_____|
 |     |     |     |     |
 R3 |  7  |  8  |  9  |  C  |
    |_____|_____|_____|_____|
 |     |     |     |     |
 R4 |  *  |  0  |  #  |  D  |
    |_____|_____|_____|_____|
 C1    C2    C3    C4
*/

#include "KeyPad.h"
#include "Utility.h"

/******************************************************************
 * PUBLIC FUNCTIONS
 ******************************************************************/

/****************************************************
 * KeyPad_Init() - Initialize key pad settings.
 * No inputs.
 * No return value.
 ****************************************************/
void KeyPad_Init(void) {
    ENABLE_GPIO_CLOCK(B);

    // Input Pins
    GPIO_MODER_SET(B, 4, GPIO_MODE_IN);
    GPIO_MODER_SET(B, 5, GPIO_MODE_IN);
    GPIO_MODER_SET(B, 6, GPIO_MODE_IN);
    GPIO_MODER_SET(B, 7, GPIO_MODE_IN);

    GPIO_PUPDR_SET(B, 4, GPIO_PUPD_NO);
    GPIO_PUPDR_SET(B, 5, GPIO_PUPD_NO);
    GPIO_PUPDR_SET(B, 6, GPIO_PUPD_NO);
    GPIO_PUPDR_SET(B, 7, GPIO_PUPD_NO);

    // Output pins
    GPIO_MODER_SET(B, 0, 1UL);
    GPIO_MODER_SET(B, 1, 1UL);
    GPIO_MODER_SET(B, 2, 1UL);
    GPIO_MODER_SET(B, 3, 1UL);

    GPIO_PUPDR_SET(B, 0, GPIO_PUPD_NO);
    GPIO_PUPDR_SET(B, 1, GPIO_PUPD_NO);
    GPIO_PUPDR_SET(B, 2, GPIO_PUPD_NO);
    GPIO_PUPDR_SET(B, 3, GPIO_PUPD_NO);

    GPIO_OTYPER_SET(B, 0, GPIO_OTYPE_OD);
    GPIO_OTYPER_SET(B, 1, GPIO_OTYPE_OD);
    GPIO_OTYPER_SET(B, 2, GPIO_OTYPE_OD);
    GPIO_OTYPER_SET(B, 3, GPIO_OTYPE_OD);
}

/********************************************************************
 * KeyPad_MatrixScan() - Checks what key is pressed on matrix keypad.
 * No inputs.
 * Returns the character that was pressed on the keypad.
 ********************************************************************/
uint8_t KeyPad_MatrixScan(void) {
    // Set row output to 0 (PB0 - PB3)
    GPIOB->ODR &= ~(1UL << (1 * 0));
    GPIOB->ODR &= ~(1UL << (1 * 1));
    GPIOB->ODR &= ~(1UL << (1 * 2));
    GPIOB->ODR &= ~(1UL << (1 * 3));

    // Debounce
    for (int i = 0; i < 5; i++) {
        if (IS_BIT_SET(GPIOB->IDR, GPIO_IDR_4) & IS_BIT_SET(GPIOB->IDR, GPIO_IDR_5) &
            IS_BIT_SET(GPIOB->IDR, GPIO_IDR_6) & IS_BIT_SET(GPIOB->IDR, GPIO_IDR_7)) {
            return 'f'; // No button is pressed
        }
        Delay_ms(10);
    }

    // Checking what button is pressed
    GPIOB->ODR &= ~(1UL << (1 * 0));
    GPIOB->ODR |= (1UL << (1 * 1));
    GPIOB->ODR |= (1UL << (1 * 2));
    GPIOB->ODR |= (1UL << (1 * 3));

    if (!(IS_BIT_SET(GPIOB->IDR, GPIO_IDR_4) & IS_BIT_SET(GPIOB->IDR, GPIO_IDR_5) &
          IS_BIT_SET(GPIOB->IDR, GPIO_IDR_6) & IS_BIT_SET(GPIOB->IDR, GPIO_IDR_7))) {
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_4)) return '1';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_5)) return '2';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_6)) return '3';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_7)) return 'A';
    }

    GPIOB->ODR |= (1UL << (1 * 0));
    GPIOB->ODR &= ~(1UL << (1 * 1));
    GPIOB->ODR |= (1UL << (1 * 2));
    GPIOB->ODR |= (1UL << (1 * 3));

    if (!(IS_BIT_SET(GPIOB->IDR, GPIO_IDR_4) & IS_BIT_SET(GPIOB->IDR, GPIO_IDR_5) &
          IS_BIT_SET(GPIOB->IDR, GPIO_IDR_6) & IS_BIT_SET(GPIOB->IDR, GPIO_IDR_7))) {
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_4)) return '4';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_5)) return '5';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_6)) return '6';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_7)) return 'B';
    }

    GPIOB->ODR |= (1UL << (1 * 0));
    GPIOB->ODR |= (1UL << (1 * 1));
    GPIOB->ODR &= ~(1UL << (1 * 2));
    GPIOB->ODR |= (1UL << (1 * 3));

    if (!(IS_BIT_SET(GPIOB->IDR, GPIO_IDR_4) & IS_BIT_SET(GPIOB->IDR, GPIO_IDR_5) &
          IS_BIT_SET(GPIOB->IDR, GPIO_IDR_6) & IS_BIT_SET(GPIOB->IDR, GPIO_IDR_7))) {
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_4)) return '7';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_5)) return '8';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_6)) return '9';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_7)) return 'C';
    }

    GPIOB->ODR |= (1UL << (1 * 0));
    GPIOB->ODR |= (1UL << (1 * 1));
    GPIOB->ODR |= (1UL << (1 * 2));
    GPIOB->ODR &= ~(1UL << (1 * 3));

    if (!(IS_BIT_SET(GPIOB->IDR, GPIO_IDR_4) & IS_BIT_SET(GPIOB->IDR, GPIO_IDR_5) &
          IS_BIT_SET(GPIOB->IDR, GPIO_IDR_6) & IS_BIT_SET(GPIOB->IDR, GPIO_IDR_7))) {
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_4)) return '*';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_5)) return '0';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_6)) return '#';
        if (!IS_BIT_SET(GPIOB->IDR, GPIO_IDR_7)) return 'D';
    }

    return 'f';
}

/***************************************************************
 * KeyPad_GetKey() - Checks if key is pressed on matrix keypad.
 * No inputs.
 * No return value.
 ***************************************************************/
uint8_t KeyPad_GetKey(void) {
    uint8_t pressedKey = '\0';
    static uint8_t lastKey = 'f';

    pressedKey = KeyPad_MatrixScan();
    if (pressedKey != 'f' && lastKey == 'f') {
        lastKey = pressedKey;
        return pressedKey;
    }

    lastKey = pressedKey;
    return 'f';
}
